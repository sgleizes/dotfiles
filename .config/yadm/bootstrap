#!/usr/bin/env zsh
#
# Bootstrap program for the dotfiles repository.
#

# Enable the default zsh options.
emulate zsh

setopt errexit      # exit the script if any statement returns a non-true valu
setopt pipefail     # unveil hidden pipeline command errors
setopt extendedglob # enable '#', '~', '^' operators and flags in patterns

# Deduce the path to the parent directory.
YADM_DIR="${0:h}"
YADM_DATA_DIR="${XDG_DATA_HOME:-$HOME/.local/share}/yadm"

# Paths to repository configuration files.
: ${YADM_GITCONFIG:=$YADM_DIR/gitconfig}
: ${YADM_GITIGNORE:=$YADM_DIR/gitignore}
: ${YADM_UNSTABLE:=$YADM_DIR/unstable}

# List of packages to prompt for automatic installation.
PACKAGE_LIST=(
  atool
  bat
  emacs
  expac
  exa
  fd
  fzf
  fasd
  fortune-mod
  htop
  httpie
  hub
  imagemagick
  jq
  mediainfo
  mlocate
  neofetch
  nnn
  pacman-contrib
  pastebinit
  rclone
  restic
  ripgrep
  rsync
  strace
  subversion
  tealdeer
  trash-cli
  tree
  unison
  wget
  xclip
  youtube-dl
)

# List of packages to hint for manual installation.
AUR_PACKAGE_LIST=(
  advcp
  archivemount
  bpytop
  direnv
  fpp-git
  git-delta
  git-extras
  hex-git
  kmon
  lazygit
  nordvpn-bin
  pistol-git
  ponysay-git
  tmux-git
  tmux-xpanes
)

# Configure the local yadm repository.
function configure_repo {
  print -P "%F{blue}::%f Configuring the local yadm repository..."

  # Hook the local git configuration and ignore patterns.
  yadm gitconfig include.path $YADM_GITCONFIG
  ln -sfn $YADM_GITIGNORE $YADM_DATA_DIR/repo.git/info/exclude

  # Enable per-worktree configuration.
  yadm gitconfig extensions.worktreeConfig true

  # Move core.worktree to the main worktree configuration file.
  yadm gitconfig --worktree core.worktree $(yadm gitconfig core.worktree)
  yadm gitconfig --unset core.worktree || true

  # Enable and set sparse checkout patterns for the main worktree.
  yadm sparse-checkout set '/*' '!/UNLICENSE' '!/README.md'
}

# Set the assume-unchanged bit for unstable files.
function mark_unstable_files {
  local files
  print -P "%F{blue}::%f Marking unstable files with the 'assume-unchanged' bit..."

  setopt localoptions nullglob
  files=($HOME/${^~$(<$YADM_UNSTABLE | sed '/^#/d')})

  yadm update-index --assume-unchanged -- $files[@]
}

# Create symlinks to shell runcoms in $HOME.
function bootstrap_xsh {
  print -P "%F{blue}::%f Linking shell runcoms to xsh runcoms..."

  # Source xsh with the appropriate configuration directory.
  XSH_CONFIG_DIR="${XDG_CONFIG_HOME:-$HOME/.config}/shell"
  source "${XSH_DIR:-${XDG_CONFIG_HOME:-$HOME/.config}/xsh}/xsh.sh"

  # Bootstrap xsh for all supported shells.
  xsh bootstrap -s posix:bash:zsh >/dev/null
}

# List packages that are missing among provided arguments.
function missing_packages {
  pacman -Sl | awk '{print $2,$4}' | grep -E "^(${(j:|:)@}) $" || true
}

# Install optional packages for the terminal environment.
function install_packages {
  local pkgs ans
  (( ! $+commands[pacman] )) && return

  pkgs=( $(missing_packages $PACKAGE_LIST[@]) )
  [[ ! $pkgs ]] && return

  print -P "%F{green}::%f The following optional packages can be automatically installed:"
  print -f '  %s\n' $pkgs[@]
  print -Pn "%F{green}::%f Proceed? [Y/n] "
  read -sk ans; print

  if [[ $ans == ('y'|$'\n') ]] {
    sudo pacman -Sy $pkgs[@] || true
  }

  pkgs=( $(missing_packages $AUR_PACKAGE_LIST[@]) )
  [[ ! $pkgs ]] && return

  print -P "%F{yellow}::%f The following optional packages can be built manually from the AUR:"
  print -f '  %s\n' $pkgs[@]
}

# Change the default login shell for the current user.
function change_login_shell {
  if [[ $(cat /etc/passwd | grep $USER) == *:/bin/zsh ]] {
    return
  }

  print -P "%F{green}::%f Changing the login shell to /bin/zsh"
  chsh $USER --shell=/bin/zsh
}

# Prompt the user to logout from the current session.
function prompt_logout {
  local ans session
  print -Pn "%F{green}::%f It is recommended to relogin using the new shell configuration, logout now? [Y/n] "
  read -sk ans; print
  [[ $ans != ('y'|$'\n') ]] && return

  session=$(loginctl session-status | head -n 1 | awk '{print $1}' || true)
  loginctl terminate-session $session
}

# Fallback to using git directly if hub is not installed.
if (( ! $+commands[hub] )) {
  print -P "%F{yellow}::%f 'hub' is not installed: using 'git' as yadm.git-program"
  yadm config yadm.git-program git
}

# Remove integration with git if delta is not installed.
if (( ! $+commands[delta] )) {
  print -P "%F{yellow}::%f 'delta' is not installed: commenting integration with 'git'"
  sed -Ei 's/(path = delta)/# \1/' $HOME/.config/git/config
}

configure_repo
mark_unstable_files
bootstrap_xsh
install_packages
change_login_shell
prompt_logout
