#!/usr/bin/env bash
# Start an ediff session in a new emacs frame. Inspired by:
# https://gist.github.com/ptrv/0b460291e14a4a3c6372
#
# This script can be used as a `git mergetool` and `git difftool`.
# It automatically detects whether to run a diff/merge session
# and also supports directories.

# Abort if arguments are not provided.
if [ ! ${#} -ge 2 ]; then
  echo >&2 "Usage: ediff <local> <remote> [merged] [base]"
  exit 1
fi

# Process arguments.
LOCAL="$1"
REMOTE="$2"
[[ $3 ]] && MERGED="$3" || MERGED="$REMOTE"
[[ -d $LOCAL && -d $REMOTE ]] && MODE='directories' || MODE='files'

# Determine the emacs command to evaluate.
if [[ $4 && -r $4 ]]; then
  BASE="$4"
  EVAL="ediff-merge-$MODE-with-ancestor \"$LOCAL\" \"$REMOTE\" \"$BASE\" nil \"$MERGED\""
elif [[ $REMOTE != "$MERGED" ]]; then
  EVAL="ediff-merge-$MODE \"$LOCAL\" \"$REMOTE\" nil \"$MERGED\""
else
  EVAL="ediff-$MODE \"$LOCAL\" \"$REMOTE\" nil"
fi

# Use a graphical frame except in the console.
if [[ $TERM == 'linux' ]]; then
  EMACSCLIENT_OPTS="--socket-name terminal --tty"
else
  EMACSCLIENT_OPTS="--socket-name graphical --create-frame"
fi

# Run emacsclient.
emacsclient $EMACSCLIENT_OPTS --eval "
  (progn
    (+workspace/rename-frame \"ediff\")
    ($EVAL))"

# Check modified file for unresolved conflicts.
if [[ $MODE == 'files' && $(egrep -c '^(<<<<<<<|=======|>>>>>>>|####### Ancestor)' "$MERGED") != 0 ]]; then
  MERGEDSAVE=$(mktemp --tmpdir "$(basename "$MERGED").XXXXXXXX")
  cp "$MERGED" "$MERGEDSAVE"
  echo >&2 "Oops! Conflict markers detected in $MERGED"
  echo >&2 "Saved your changes to $MERGEDSAVE"
  exit 1
fi
